content_assist_disabled_computers=org.eclipse.jdt.ui.textProposalCategory\u0000org.eclipse.jdt.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\u0000
content_assist_favorite_static_members=org.assertj.core.api.Assertions.*;org.mockito.Matchers.*;org.mockito.Mockito.*;org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.*;org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.*;org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*;org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.*;org.springframework.test.web.client.match.MockRestRequestMatchers.*;org.springframework.test.web.client.response.MockRestResponseCreators.*;org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;org.hamcrest.CoreMatchers.*;org.junit.Assert.*
content_assist_lru_history=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><history maxLHS\="100" maxRHS\="10"><lhs name\="Tree.Problems.SpiralTreeTraversal$Node"><rhs name\="Tree.Problems.SpiralTreeTraversal$Node"/></lhs><lhs name\="Tree.Problems.BinaryToDLL$Node"><rhs name\="Tree.Problems.BinaryToDLL$Node"/></lhs><lhs name\="Tree.Problems.BinaryToDLL$DLL"><rhs name\="Tree.Problems.BinaryToDLL$DLL"/></lhs><lhs name\="Tree.Problems.CommonAncestorofBST$Node"><rhs name\="Tree.Problems.CommonAncestorofBST$Node"/></lhs><lhs name\="Tree.Problems.CountLeavesInBinaryTree$Node"><rhs name\="Tree.Problems.CountLeavesInBinaryTree$Node"/></lhs><lhs name\="Tree.Problems.isBinaryTreeBalanced$Node"><rhs name\="Tree.Problems.isBinaryTreeBalanced$Node"/></lhs><lhs name\="Tree.Problems.isSymmetricBinaryTree$Node"><rhs name\="Tree.Problems.isSymmetricBinaryTree$Node"/></lhs><lhs name\="Tree.Problems.DiameterOfBinaryTree$Height"><rhs name\="Tree.Problems.DiameterOfBinaryTree$Height"/></lhs><lhs name\="Tree.Problems.DiameterOfBinaryTree$Node"><rhs name\="Tree.Problems.DiameterOfBinaryTree$Node"/></lhs><lhs name\="Tree.Problems.MaxSumPathInBinaryTree$Node"><rhs name\="Tree.Problems.MaxSumPathInBinaryTree$Node"/></lhs><lhs name\="Tree.Problems.MaxSumPathInBinaryTree$Result"><rhs name\="Tree.Problems.MaxSumPathInBinaryTree$Result"/></lhs><lhs name\="Tree.Problems.SerializeAndDeserializeBinaryTree$Node"><rhs name\="Tree.Problems.SerializeAndDeserializeBinaryTree$Node"/></lhs><lhs name\="LinkedList.ReverseLinkedList$Node"><rhs name\="LinkedList.ReverseLinkedList$Node"/></lhs><lhs name\="LinkedList.DetectIfLinkedListHasLoop$Node"><rhs name\="LinkedList.DetectIfLinkedListHasLoop$Node"/></lhs><lhs name\="LinkedList.IntersectionPointInYShape$Node"><rhs name\="LinkedList.IntersectionPointInYShape$Node"/></lhs><lhs name\="LinkedList.MergeSortedLinkedList$Node"><rhs name\="LinkedList.MergeSortedLinkedList$Node"/></lhs><lhs name\="LinkedList.FlatteningLinkedList$Node"><rhs name\="LinkedList.FlatteningLinkedList$Node"/></lhs><lhs name\="LinkedList.StackUsingLinkedList$StackNode"><rhs name\="LinkedList.StackUsingLinkedList$StackNode"/></lhs><lhs name\="LinkedList.QueueUsingLinkedList$QueueNode"><rhs name\="LinkedList.QueueUsingLinkedList$QueueNode"/></lhs><lhs name\="LinkedList.SortLinkedList_0s1s2s$Node"><rhs name\="LinkedList.SortLinkedList_0s1s2s$Node"/></lhs><lhs name\="LinkedList.WorkingMiddleNodeOfLinkedList$Node"><rhs name\="LinkedList.WorkingMiddleNodeOfLinkedList$Node"/></lhs><lhs name\="StackQueue.RottenOranges$item"><rhs name\="StackQueue.RottenOranges$item"/></lhs><lhs name\="java.util.Iterator"><rhs name\="java.util.Scanner"/></lhs><lhs name\="java.io.Closeable"><rhs name\="java.util.Scanner"/></lhs><lhs name\="java.lang.AutoCloseable"><rhs name\="java.util.Scanner"/></lhs><lhs name\="Tree.SwapNodes$Node"><rhs name\="Tree.SwapNodes$Node"/></lhs><lhs name\="Tree.LeastCommonAncestor$Node"><rhs name\="Tree.LeastCommonAncestor$Node"/></lhs><lhs name\="Tree.LowestCommonAncestor$Node"><rhs name\="Tree.LowestCommonAncestor$Node"/></lhs><lhs name\="LinkedList.ReverseEven$Node"><rhs name\="LinkedList.ReverseEven$Node"/></lhs><lhs name\="LinkedList.RotateDoublyLinkedList$Node"><rhs name\="LinkedList.RotateDoublyLinkedList$Node"/></lhs><lhs name\="LinkedList.AddOneToLinkedList$Node"><rhs name\="LinkedList.AddOneToLinkedList$Node"/></lhs><lhs name\="LinkedList.Matrix2LinkedList$Node"><rhs name\="LinkedList.Matrix2LinkedList$Node"/></lhs><lhs name\="LinkedList.DeleteOccurance$Node"><rhs name\="LinkedList.DeleteOccurance$Node"/></lhs><lhs name\="Tree.Problems.SumTree$Node"><rhs name\="Tree.Problems.SumTree$Node"/></lhs><lhs name\="Tree.MakingBSTFromArray$Node"><rhs name\="Tree.MakingBSTFromArray$Node"/></lhs><lhs name\="Tree.PreOrder2PostOrder_BST$BST_Node"><rhs name\="Tree.PreOrder2PostOrder_BST$BST_Node"/></lhs><lhs name\="LinkedList.IntersectionOfTwoSortedLinkedList$Node"><rhs name\="LinkedList.IntersectionOfTwoSortedLinkedList$Node"/></lhs><lhs name\="LinkedList.DeleteMiddleNode$Node"><rhs name\="LinkedList.DeleteMiddleNode$Node"/></lhs><lhs name\="Tree.LevelOrder_LineByLine$Node"><rhs name\="Tree.LevelOrder_LineByLine$Node"/></lhs><lhs name\="Tree.AllNodesWithNoSibling$Node"><rhs name\="Tree.AllNodesWithNoSibling$Node"/></lhs><lhs name\="Tree.PathSumTree$Node"><rhs name\="Tree.PathSumTree$Node"/></lhs><lhs name\="Tree.FaceView.TopView_Without_HD$Node"><rhs name\="Tree.FaceView.TopView_Without_HD$Node"/></lhs><lhs name\="Tree.HuffmanCoding$Node"><rhs name\="Tree.HuffmanCoding$Node"/></lhs><lhs name\="Tree.IsBinaryTree$Node"><rhs name\="Tree.IsBinaryTree$Node"/></lhs><lhs name\="Tree.DeleteNodeFromBST$Node"><rhs name\="Tree.DeleteNodeFromBST$Node"/></lhs><lhs name\="java.lang.IllegalArgumentException"><rhs name\="java.lang.NumberFormatException"/></lhs><lhs name\="java.lang.RuntimeException"><rhs name\="java.lang.NumberFormatException"/></lhs><lhs name\="java.lang.Exception"><rhs name\="java.lang.NumberFormatException"/></lhs><lhs name\="java.lang.Throwable"><rhs name\="java.lang.NumberFormatException"/></lhs><lhs name\="java.lang.NumberFormatException"><rhs name\="java.lang.NumberFormatException"/></lhs><lhs name\="Tree.CountLeafNode$Node"><rhs name\="Tree.CountLeafNode$Node"/></lhs><lhs name\="Tree.LL_BST$LNode"><rhs name\="Tree.LL_BST$LNode"/></lhs><lhs name\="Tree.LL_BST$TNode"><rhs name\="Tree.LL_BST$TNode"/></lhs><lhs name\="java.util.Collection"><rhs name\="java.util.Vector"/><rhs name\="java.util.TreeSet"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/><rhs name\="java.util.concurrent.LinkedBlockingDeque"/><rhs name\="java.util.LinkedList"/></lhs><lhs name\="java.lang.Iterable"><rhs name\="java.util.Vector"/><rhs name\="java.util.TreeSet"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/><rhs name\="java.util.concurrent.LinkedBlockingDeque"/><rhs name\="java.util.LinkedList"/></lhs><lhs name\="Tree.ReverseLevelOrderPrint$Node"><rhs name\="Tree.ReverseLevelOrderPrint$Node"/></lhs><lhs name\="java.util.Vector"><rhs name\="java.util.Vector"/><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.List"><rhs name\="java.util.Vector"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.RandomAccess"><rhs name\="java.util.Vector"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/></lhs><lhs name\="java.lang.Cloneable"><rhs name\="java.util.Vector"/><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeSet"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.AbstractList"><rhs name\="java.util.Vector"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.AbstractCollection"><rhs name\="java.util.Vector"/><rhs name\="java.util.TreeSet"/><rhs name\="java.util.ArrayList"/><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.Stack"><rhs name\="java.util.Stack"/></lhs><lhs name\="Tree.InOrderSuccessor$Node"><rhs name\="Tree.InOrderSuccessor$Node"/></lhs><lhs name\="Tree.NoSiblingNode$Node"><rhs name\="Tree.NoSiblingNode$Node"/></lhs><lhs name\="LinkedList.Reorder_List$Node"><rhs name\="LinkedList.Reorder_List$Node"/></lhs><lhs name\="java.util.Map"><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.AbstractMap"><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.HashMap"><rhs name\="java.util.HashMap"/></lhs><lhs name\="java.util.ArrayList"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="DeleteNodeWithoutHeader$Node"><rhs name\="DeleteNodeWithoutHeader$Node"/></lhs><lhs name\="Ignite.CountLeavesInBinaryTree$Node"><rhs name\="Ignite.CountLeavesInBinaryTree$Node"/></lhs><lhs name\="Working.MirrorTree$Node"><rhs name\="Working.MirrorTree$Node"/></lhs><lhs name\="Working.LevelOrderTraversal$Node"><rhs name\="Working.LevelOrderTraversal$Node"/></lhs><lhs name\="java.util.Queue"><rhs name\="java.util.concurrent.LinkedBlockingDeque"/><rhs name\="java.util.LinkedList"/></lhs><lhs name\="Working.LowestCommonAncestorInBST$Node"><rhs name\="Working.LowestCommonAncestorInBST$Node"/></lhs><lhs name\="Working.KDistanceFromRoot$Node"><rhs name\="Working.KDistanceFromRoot$Node"/></lhs><lhs name\="Working.TransformSumTree$Node"><rhs name\="Working.TransformSumTree$Node"/></lhs><lhs name\="Working.StackUsingLinkedList$Node"><rhs name\="Working.StackUsingLinkedList$Node"/></lhs><lhs name\="Working.ReverseALinkedList$Node"><rhs name\="Working.ReverseALinkedList$Node"/></lhs><lhs name\="Working.Merge2SortedLinkedList$Node"><rhs name\="Working.Merge2SortedLinkedList$Node"/></lhs><lhs name\="Working.DeleteKeysFromLinkedList$Node"><rhs name\="Working.DeleteKeysFromLinkedList$Node"/></lhs><lhs name\="java.lang.CharSequence"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.lang.StringBuilder"/><rhs name\="java.lang.String"/></lhs><lhs name\="java.lang.AbstractStringBuilder"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.lang.Appendable"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="Array.ArrayQuery$Node"><rhs name\="Array.ArrayQuery$Node"/></lhs><lhs name\="Graph.ComponentsInGraph$GraphValue"><rhs name\="Graph.ComponentsInGraph$GraphValue"/></lhs><lhs name\="Array.MergingCommunity$Node"><rhs name\="Array.MergingCommunity$Node"/></lhs><lhs name\="java.util.NavigableSet"><rhs name\="java.util.TreeSet"/></lhs><lhs name\="java.util.SortedSet"><rhs name\="java.util.TreeSet"/></lhs><lhs name\="java.util.Set"><rhs name\="java.util.TreeSet"/></lhs><lhs name\="java.util.AbstractSet"><rhs name\="java.util.TreeSet"/></lhs><lhs name\="java.util.TreeSet"><rhs name\="java.util.TreeSet"/></lhs><lhs name\="Tree.PreTreeConstruct$Node"><rhs name\="Tree.PreTreeConstruct$Node"/></lhs><lhs name\="LinkedList.InsertInSortedCircular$Node"><rhs name\="LinkedList.InsertInSortedCircular$Node"/></lhs><lhs name\="Stack.SpecialStack"><rhs name\="Stack.SpecialStack"/></lhs><lhs name\="Tree.TopViewTree$Node"><rhs name\="Tree.TopViewTree$Node"/></lhs><lhs name\="java.util.NavigableMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.SortedMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.TreeMap"><rhs name\="java.util.TreeMap"/></lhs></history>
content_assist_number_of_computers=25
content_assist_proposals_background=255,255,255
content_assist_proposals_foreground=0,0,0
eclipse.preferences.version=1
org.eclipse.jdt.internal.ui.navigator.layout=2
org.eclipse.jdt.internal.ui.navigator.librariesnode=true
org.eclipse.jdt.ui.formatterprofiles.version=18
org.eclipse.jdt.ui.text.code_templates_migrated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.templates_migrated=true
spelling_locale=en_GB
spelling_locale_initialized=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
